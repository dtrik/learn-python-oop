{
  
    
        "post0": {
            "title": "Python OOP Concepts",
            "content": "This is based on the wonderful YouTube playlist by Corey Schafer: https://coreyms.com/development/python/python-oop-tutorials-complete-series I am creating a notebook demonstrating my understanding . Below is the definition of a basic class called Radiant . class Radiant(): &quot;An empty class definition&quot; pass radiant_1 = Radiant() radiant_1.first_name = &quot;Kaladin&quot; radiant_1.last_name = &quot;Stormblessed&quot; . Here we have a created an empty class called Radiant. Then we have created an instance of the class Radiant called radiant_1. Finally we have assigned the &#39;first_name&#39; attribute of radiant_1 with the string &quot;Kaladin&quot; and &#39;last_name&#39; attribute of radiant_1 with the string &quot;Stormblessed&quot; . print(radiant_1.first_name) print(radiant_1.last_name) . Kaladin Stormblessed . Above we can see that the first_name and last_name attributes of radiant_1 are now displayed as expected. Let us now create another instance of radiant called radiant_2 and assign the first_name and last_name attributes as &quot;Dalinar&quot; and &quot;Thorin&quot; . radiant_2 = Radiant() radiant_2.first_name = &quot;Dalinar&quot; radiant_2.last_name = &quot;Thorin&quot; . print(radiant_2.first_name) print(radiant_2.last_name) . Dalinar Thorin . This also is working as expected. But there is a lot of repetition we can see for creating each new instance of the class Radiant. To resolve this, we create a special function inside the Radiant class called an init method. . class Radiant(): def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name . The above init method has two underscores surrounding the name and is referred to as a &quot;dunder init&quot; method. The first argument is &#39;self&#39; and it is a standard usage which refers to the instance itself. Here we are assigning the instance&#39;s first_name and last_name based on the 2nd and 3rd arguments passed to it. Whenever a new instance of the Radiant class is created, the init method is called automatically. The new way of creating it is shown below. . radiant_1 = Radiant(&quot;Kaladin&quot;, &quot;Stormblessed&quot;) print(radiant_1.first_name) print(radiant_1.last_name) . Kaladin Stormblessed . Above you can see that the same functionality is now available and avoids the repetitive assignment statements. Creating another instance is as simple as: . radiant_2 = Radiant(&quot;Dalinar&quot;, &quot;Kholin&quot;) print(radiant_2.first_name) print(radiant_2.last_name) . Dalinar Kholin .",
            "url": "https://dtrik.github.io/learn-python-oop/jupyter/2022/08/09/_Python_OOP_basics.html",
            "relUrl": "/jupyter/2022/08/09/_Python_OOP_basics.html",
            "date": " • Aug 9, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dtrik.github.io/learn-python-oop/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dtrik.github.io/learn-python-oop/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}