{
  
    
        "post0": {
            "title": "Python OOP Concepts - 1",
            "content": "This is based on the wonderful tutorial by Corey Schafer . This notebook demonstrates my understanding of the first lecture: . &gt; youtube: https://www.youtube.com/watch?v=ZDa-Z5JzLYM&amp;t=2s . Basic Class . Below is the definition of a basic class called Radiant: . class Radiant(): &quot;An empty class definition&quot; pass radiant_1 = Radiant() radiant_1.first_name = &quot;Kaladin&quot; radiant_1.last_name = &quot;Stormblessed&quot; . Here we have a created an empty class called Radiant. Then we have created an instance of the class Radiant called radiant_1. Finally we have assigned the &#39;first_name&#39; and &#39;last_name&#39; attributes of radiant_1 with the strings &quot;Kaladin&quot; and &quot;Stormblessed&quot; respectively. . print(radiant_1.first_name) print(radiant_1.last_name) . Kaladin Stormblessed . Above, we can see that the &#39;first_name&#39; and &#39;last_name&#39; attributes of radiant_1 are now displayed as expected. Let us now create another instance of radiant called radiant_2 and assign the &#39;first_name&#39; and &#39;last_name&#39; attributes as &quot;Dalinar&quot; and &quot;Thorin&quot;. . radiant_2 = Radiant() radiant_2.first_name = &quot;Dalinar&quot; radiant_2.last_name = &quot;Thorin&quot; . print(radiant_2.first_name) print(radiant_2.last_name) . Dalinar Thorin . This is also working as expected. But we can see that there is a lot of repetition for creating each new instance of the class Radiant. To resolve this, we create a special method inside the Radiant class called a constructor. . Class with Constructor . class Radiant(): &quot;Class with constructor&quot; def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name . The new method above is the constructor for this class. It is also referred to as a &quot;dunder init&quot; method (dunder because the method name is surrounded by double underscores). Whenever a new instance of the Radiant class is created, the constructor is called automatically. The first argument is always &#39;self&#39; and it is a standard terminology that refers to the instance itself. Here we are assigning the instance&#39;s first_name and lastname based on the 2nd and 3rd arguments passed to it. Once a constructor ( _init__) is available, an instance of the class can be created as shown below. . radiant_1 = Radiant(&quot;Kaladin&quot;, &quot;Stormblessed&quot;) print(radiant_1.first_name) print(radiant_1.last_name) . Kaladin Stormblessed . Above, you can see that the same functionality is now available and avoids the repetitive assignment statements. Creating another instance is as simple as: . radiant_2 = Radiant(&quot;Dalinar&quot;, &quot;Kholin&quot;) print(radiant_2.first_name) print(radiant_2.last_name) . Dalinar Kholin . Class Methods . Now that we have our class Radiant, let us create a function that is specific to this class and something that each instance of the class can use. Each instance of the class Radiant can take the first oath: &quot;Life before death. Strength before weakness. Journey before destination.&quot; Let us create a method in the class to take this oath. . class Radiant(): &quot;Class with constructor and method&quot; def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def take_first_oath(self): print(f&quot;{self.first_name} is taking the following oath: Life before death. Strength before weakness. Journey before destination.&quot;) self.oath_count = 1 radiant_1 = Radiant(&quot;Kaladin&quot;, &quot;Stormblessed&quot;) radiant_1.take_first_oath() print(f&quot;{radiant_1.first_name} {radiant_1.last_name} has taken {radiant_1.oath_count} oaths&quot;) . Kaladin is taking the following oath: Life before death. Strength before weakness. Journey before destination. Kaladin Stormblessed has taken 1 oaths . The above method not only prints the first oath but also updates a newly created attribute for the instance called &#39;oath_count&#39;. Inspired by Kaladin, Dalinar is also ready to take the first oath. . radiant_2 = Radiant(&quot;Dalinar&quot;, &quot;Thorin&quot;) radiant_2.take_first_oath() print(f&quot;{radiant_2.first_name} {radiant_2.last_name} has taken {radiant_2.oath_count} oaths&quot;) . Dalinar is taking the following oath: Life before death. Strength before weakness. Journey before destination. Dalinar Thorin has taken 1 oaths . The following two are equivalent: . radiant_2.take_first_oath() Radiant.take_first_oath(radiant_2) . Dalinar is taking the following oath: Life before death. Strength before weakness. Journey before destination. Dalinar is taking the following oath: Life before death. Strength before weakness. Journey before destination. . Now that both our radiants have taken the first oath, let us continue on this in another page. . All the code is below in a single cell: . class Radiant(): def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def take_first_oath(self): print(f&quot;{self.first_name} is taking the following oath: Life before death. Strength before weakness. Journey before destination.&quot;) self.oath_count = 1 radiant_1 = Radiant(&quot;Kaladin&quot;, &quot;Stormblessed&quot;) radiant_1.take_first_oath() print(f&quot;{radiant_1.first_name} {radiant_1.last_name} has taken {radiant_1.oath_count} oaths&quot;) radiant_2 = Radiant(&quot;Dalinar&quot;, &quot;Thorin&quot;) radiant_2.take_first_oath() print(f&quot;{radiant_2.first_name} {radiant_2.last_name} has taken {radiant_2.oath_count} oaths&quot;) .",
            "url": "https://dtrik.github.io/learn-python-oop/jupyter/2022/08/09/_Python_OOP_basics.html",
            "relUrl": "/jupyter/2022/08/09/_Python_OOP_basics.html",
            "date": " • Aug 9, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This is a project deployed using fastpages 1 to demonstrate OOP concepts in Python. It is based on the YouTube content by Corey Schafer. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dtrik.github.io/learn-python-oop/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dtrik.github.io/learn-python-oop/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}